{
  "hash": "4f043f844c4432a758443e32091d4864",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R markdown for teaching\"\ndescription: \"\"\nauthor:\n  - name: Andrea Gabrio\n    url: https://angabrio.github.io/agabriosite2/\n    orcid: 0000-0002-7650-4534\n    affiliation: Maastricht University\n    affiliation-url: https://www.maastrichtuniversity.nl/research/methodology-and-statistics\ndate: 2022-05-05\ncategories: [Quarto, R, Academia, teaching] # self-defined categories\n#citation: \n#  url: https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/ \nimage: featured.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n![](featured.png){fig-align=\"center\"}\nHi guys, today I wanted to post something different from usual research tediousness that is only liked by statisticians and try to focus on another component my academic career, education or teaching, which has recently become quite prominent (with pros and cons of course). \n\nSpecifically, I have been recently interested in incorporating some reproducible documentation within my own teaching material since I am not course coordinators in statistics for bachelor students here at UM. In the past, I saw that people tended to use these very nice but really time-consuming word documents that needed update every year for making questions and assignment tasks. Do not get me wrong the different examples and ideas behind these assessments are really nice but I have to admit that, given the inevitable need to use the same type of dataset every year, the chance that students received some tips about these tasks was quite nonignorable. \n\nThus, after receiving some inputs from one of my colleagues (thanks Sophie!), I have decided to try out full **R markdown** documentation to generate examples similar to the ones used in the past but that could be generated in a slightly different way every year taking advantage of the reproducibility of such documents with an incorporated R coding at the basis of the data generation procedure. I really think these approaches will represent the future for any type of teaching activity that involves some sort of data analysis and interpretation such as statistics: the possibility they offer to efficiently provide new examples without the need to look for new data or each time generate new datasets is so enticing for teachers and researchers who are involved in education. It makes our job so much easier in the long term which more than compensates the cost of learning how to implement these approaches. \n\nAs an example, I will focus here on the topic of **simple linear regression** which I give to students of the second year. For example, let's say that the objective of the tutorial is to learn some basic concepts of linear regression modelling, e.g. interpretation of coefficients and correlation measures. You can start with an introductory part to describe the type of dataset students will need to work on.\n\n**Background**\n\n*The dataset XXX comprises 40 countries (Country) in the world with populations of more than 20 million as of 1990 and records the life expectancy at birth (Lex), the number of people per television set (Ptel), and the number of people per physician (Pphy). The average life expectancies between males and females are provided as the country's overall life expectancy.* \n\nThis text will directly appear on the final document as you typed in the `Rmd` file. So for it works like a standard word file but it is now that the magic happens. We can create **chunks** of `R` code and embed them within the Rmd file and use different options to decide whether to show or not such code lines. For example, let's say we want to generate the data of the above mentioned dataset. We can create a new chunk which incorporates the following R code that simulates the desired variables, their relationships, and combine them together into the new dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(768)\nn <- 40\nln_pphy <- rnorm(n, 7.2, 1.3)\nln_ptel <- rnorm(n, 2.38, 1.56)\npphy <- exp(ln_pphy)\nptel <- exp(ln_ptel)\nerror <- rnorm(n, 0, 6)\nlex <- 70 - 0.023*ptel - 0.001*pphy + error\ncountry <- c(\"Argentina\", \"Bangladesh\", \"Brazil\", \"Canada\", \"China\", \"Colombia\", \"Egypt\", \"Ethiopia\", \"France\", \"Germany\", \"India\", \"Indonesia\", \"Iran\", \"Italy\", \"Japan\", \"Kenya\", \"Korea North\", \"Korea South\", \"Mexico\", \"Morocco\", \"Myanmar Bur\", \"Pakistan\", \"Peru\", \"Philippines\", \"Poland\", \"Romania\", \"Russia\", \"South Afric\", \"Spain\", \"Sudan\", \"Taiwan\", \"Tanzania\", \"Thailand\", \"Turkey\", \"Ukraine\", \"UK\", \"USA\", \"Venezuela\", \"Vietnam\", \"Zaire\")\ndata_le_tv_sim <- data.frame(country, lex, ptel, pphy)\n```\n:::\n\n\nNow all the generated variables, namely *lex*, *ptel*, *pphy* and *country*, are included into the data frame called *data_le_tv_sim* which has been created in the R workspace. If the focus on the tutorial is not on coding, it is desirable to hide the R code from the final document so that it is not displayed (but is still present and saved within `R`). `R` markdown allows you to do this in a really straightforward way by means of **chunk options** which can be customised for each created chunk. For example, \n\n  1. The option *echo=FALSE* allows to hide the `R` lines (while setting it to *TRUE* shows the lines)\n  \n  2. The option *eval=TRUE* tells the software to actually run the lines inside the chunk (setting it to *FALSE* prevents from doing so)\n  \nThese are only two of many different options that can be customised in regard to the display of tables, figures, code lines color, size, font, etc.... For a full illustration of the high degree of customisation provided by `R` markdown I refer to the [dedicated webpage](https://rmarkdown.rstudio.com/). \n\nAfter the introduction is done and perhaps the context and objective of the analysis presented, we can start asking questions. Let's start with somehting simple, such as \n\n**Exercise**\n\n  **a**. *Examine and comment on the distributions of each variable separately (descriptives, histograms etc).*\n\nWell we can answer our own question (i.e. we give ourselves the solutions) by creating a new chunk in which we generate the desired output in `R`. Since we generated the dataset in the chunk before, it is still available within the `R` environment and we do not need to re-create it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nhist_lex <- r2spss::histogram(data_le_tv_sim, variable = \"lex\") + xlab(\"life expectancy\")\nhist_ptel <- r2spss::histogram(data_le_tv_sim, variable = \"ptel\") + xlab(\"people per television\")\nhist_pphy <- r2spss::histogram(data_le_tv_sim, variable = \"pphy\") + xlab(\"people per physician\")\nbox_lex <- r2spss::box_plot(data_le_tv_sim, variables = \"lex\") + xlab(\"life expectancy\")\nbox_ptel <- r2spss::box_plot(data_le_tv_sim, variables = \"ptel\") + xlab(\"people per television\")\nbox_pphy <- r2spss::box_plot(data_le_tv_sim, variables = \"pphy\") + xlab(\"people per physician\")\ngridExtra::grid.arrange(hist_lex, hist_ptel, hist_pphy,\n             box_lex, box_ptel, box_pphy, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\nHere I used some *ggplot2* coding to generate some boxplots and histograms of the data but of course the choice is entirely yours to decide which graphs or summaries should be provided by the students. For generating tables, we can also take advantage of the package **knitr** and its function **kable** which allows to display standard `R` tables in a much prettier format.\n\n\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(dplyr)\nd.summary.extended <- data_le_tv_sim %>%\n    dplyr::select(lex, ptel, pphy) %>%\n    psych::describe(quant=c(.25,.75)) %>%\n    as_tibble(rownames=\"rowname\")\nd.summary <- d.summary.extended %>%\n    dplyr::select(var=rowname, min, q25=Q0.25, median, q75=Q0.75, max, mean, sd)\nkable(d.summary, caption = \"Summary statistics\", format = \"html\", digits = 1)\n```\n\n`````{=html}\n<table>\n<caption>Summary statistics</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> var </th>\n   <th style=\"text-align:right;\"> min </th>\n   <th style=\"text-align:right;\"> q25 </th>\n   <th style=\"text-align:right;\"> median </th>\n   <th style=\"text-align:right;\"> q75 </th>\n   <th style=\"text-align:right;\"> max </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> sd </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> lex </td>\n   <td style=\"text-align:right;\"> 28.7 </td>\n   <td style=\"text-align:right;\"> 62.3 </td>\n   <td style=\"text-align:right;\"> 68.0 </td>\n   <td style=\"text-align:right;\"> 70.0 </td>\n   <td style=\"text-align:right;\"> 81.3 </td>\n   <td style=\"text-align:right;\"> 65.9 </td>\n   <td style=\"text-align:right;\"> 8.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ptel </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 19.5 </td>\n   <td style=\"text-align:right;\"> 41.2 </td>\n   <td style=\"text-align:right;\"> 1349.5 </td>\n   <td style=\"text-align:right;\"> 62.9 </td>\n   <td style=\"text-align:right;\"> 211.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pphy </td>\n   <td style=\"text-align:right;\"> 106.1 </td>\n   <td style=\"text-align:right;\"> 710.2 </td>\n   <td style=\"text-align:right;\"> 1375.0 </td>\n   <td style=\"text-align:right;\"> 2767.5 </td>\n   <td style=\"text-align:right;\"> 11031.2 </td>\n   <td style=\"text-align:right;\"> 2206.0 </td>\n   <td style=\"text-align:right;\"> 2321.1 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n\n\nAlso **kable** provides a lot of customisation options that allow to have many different types of formats and styles for your table, which can also be further extended using the package [**kableExtra**](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html). But let's continue with our test.\n\n  **b**. *Would you expect an association between a country’s life expectancy and its density of people per television set? If yes, would that be positive or negative (use the scatter plot function)?*\n\nTo answer this question we could produce some scatter plots between the variables in `R`. An alternative would be to calculate the Pearson's correlation coefficient as an indicative number. We could obtain such number by creating a corresponding chunk code but given that we only need a number it is actually more convenient to generate it within our line of text. How can we do that? simple, in the `Rmd` file you can include some inline R code by using the quotes signs. This means that instead of having:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#corr coeff\nround(cor(lex, ptel, method = c(\"pearson\")), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.76\n```\n\n\n:::\n\n```{.r .cell-code}\n#corr coeff test\nas.numeric(cor.test(lex, ptel, method = c(\"pearson\"))[\"p.value\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.70736e-08\n```\n\n\n:::\n:::\n\n\nyou can directly write a sentence an inlcude the output of the two above functions within the text. The results would be something like: the estimated Pearson's correlation coefficient value between life expectancy and people per television is -0.76. The p-value given by the correlation test is 1.7073596\\times 10^{-8}. What if now we want to include some theoretical stuff for the students?\n\n  **d**. *Interpret your results. Would the sending of television shiploads to countries with short life expectancies improve the latter? Is there an explanation for your findings?*\n  \nWe can do it in an easy way since R markdown also supports latex math environments in combination with inline R code. For example, we can answer with something like the following. Since we are looking at the correlation coefficient $\\rho$ (Pearson's), then the null and alternative hypotheses about the test for the linear association between life expectancy and people per television can be formulated as:\n\n  H0. $\\rho = 0$ (no linear association between variables)\n  \n  H1. $\\rho \\neq 0$ (linear association between variables)\n  \nWe can use the correspnding p-value of this test equal to 1.7073596\\times 10^{-8} to make a decision to whether reject or not the null hypothesis based on the evidence from the observed data. Finally, let's do what we are here for, linear regression!\n\n  **e**. *Perform a procedure that predicts life expectancy from people per television*\n\nIn the following code I run the model and save some key output that I will need to display later on. A convenient feature of `R` markdown writing is that, after running a code chunk, everything that was successfully run is saved in the current R workspace and can be called back later on in the document very easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfitm1_r <- lm(lex ~ ptel, data = data_le_tv_sim)\nfitm1rsq <- round(summary(fitm1_r)$r.square, digits = 2)\nfitm1RSS <- round(anova(fitm1_r)[\"ptel\", \"Sum Sq\"], digits = 2)\nfitm1ESS <- round(anova(fitm1_r)[\"Residuals\", \"Sum Sq\"], digits = 2)\nfitm1TSS <- fitm1RSS + fitm1ESS\nfitm1pval <- round(summary(fitm1_r)$coefficients[2, 4], digits = 4)  \n```\n:::\n\n\nWe can then decide whether we want to show the summary results directly from the `R` output \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fitm1_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = lex ~ ptel, data = data_le_tv_sim)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-9.792 -3.218  1.341  3.231 13.850 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 67.784092   0.895708  75.677  < 2e-16 ***\nptel        -0.029235   0.004108  -7.117 1.71e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.424 on 38 degrees of freedom\nMultiple R-squared:  0.5714,\tAdjusted R-squared:  0.5601 \nF-statistic: 50.66 on 1 and 38 DF,  p-value: 1.707e-08\n```\n\n\n:::\n:::\n\n\nor perhaps hide the above output (setting the chunk option *echo=FALSE*) and provide a textual explanation while also embedding the `R` code generating the numeric results of interest (e.g. estimates or CI bounds) within the written text. If doing so, then we could have something like the following. \n\nThe model intercept and coefficient are 67.78 and -0.03, respectively. This means that 67.78 change in life expectancy is associated with a one unit increase in people per television. The p-value of this estimate is 0 with corresponding $95\\%$ confidence interval being (-0.04, -0.02).\n\nThe analysis of variance reveals that the residual sum of squares (ESS) is 1118.01, the regression sum of squares (RSS) is 1490.38, for a total sum of squares (TSS) of 2608.39. The corresponding $R^2=\\frac{\\text{RSS}}{TSS}$ value of the model is given by 0.57, which suggests how about 57 % of the variation in life expectancy is explained by people per television.\n\n**Conclusions**\n\n**R markdown** provides a really nice opportunity to replace old and static documents with files that can be easily updated by simply changing a couple of lines of code. The results of this exercise can be replicated by using the same seed number but can also be varied by simply changing such number or by setting it to be randomly generated every time. Although not very popular yet, I truly believe `R` markdown will innovate the way teaching is done, at least within the scientific and quantitative data analysis field. For statistics, this is perfect since it allows an automated procedure to obtain new datasets that are consistent with the coding source created by the educator while also providing students with different numeric examples that makes it harder to cheat by simply \"copying the answers from the previous years\". \n\nI have started using R markdown for my own research a few years ago but its extreme flexibility and advantage over standard education tools for writing up documents has lead me to make it my best option also within my educational activities. Of course, I understand that the barrier to entry can be quite steep, especially for people who are not familiar with coding. However, I believe that getting familiar with these methods has become more and more relevant in the last years and will represent an essential skill for every teacher involved in data analysis topics. \n\nNot convinced yet? are you not a fan of latex or html coding? no problem, `R` markdown allows also to produce these documents in word and even power point formats! \n\n**Hurray for R markdown!!!**  \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}