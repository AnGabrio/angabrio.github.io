{
  "hash": "772b2ef1d3c06b00870ed70227b3b1a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Temporal Autocorrelation (JAGS)\"\ndescription: \"\"\nauthor:\n  - name: Andrea Gabrio\n    url: https://angabrio.github.io/agabriosite2/\n    orcid: 0000-0002-7650-4534\n    email: a.gabrio@maastrichtuniversity.nl\n    corresponding: true    \n    affiliation: Maastricht University\n    affiliation-url: https://www.maastrichtuniversity.nl/research/methodology-and-statistics\ndate: 2020-02-08\ncategories: [Quarto, R, Academia, Software, Statistics] # self-defined categories\n#image: featured.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nabstract: > \n  [This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models ...]{style=\"font-size: 85%\"}\nkeywords:\n  - Software\n  - Statistics\n  - Stan\n#license: \"GPL-2\"\n#copyright: \n#  holder: CRAN\n#  year: 2023\n#citation: \n#  title: missingHE\n#  author: Andrea Gabrio\n#  note: R package version 4.4.2\n#  url: https://cran.r-project.org/web/packages/missingHE\n#funding: \"The author received no specific funding for this work.\"\nbibliography: citations_jags9.bib\n#nocite: |\n#  @gabrio2017handling\n---\n\n\nThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. `BUGS` (Bayesian inference Using *Gibbs Sampling*) is an algorithm and supporting language (resembling `R`) dedicated to performing the Gibbs sampling implementation of *Markov Chain Monte Carlo* (MCMC) method. Dialects of the `BUGS` language are implemented within three main projects:\n\n1. **OpenBUGS** - written in component pascal.\n \n2. **JAGS** - (Just Another Gibbs Sampler) - written in `C++`. \n\n3. **STAN** - a dedicated Bayesian modelling framework written in `C++` and implementing *Hamiltonian* MCMC samplers.\n\nWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of `R`, and thus, they are best accessed from within `R` itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\n* *R2OpenBUGS* - interfaces with `OpenBUGS`\n\n* *R2jags* - interfaces with `JAGS`\n\n* *rstan* - interfaces with `STAN`\n\nThis tutorial will demonstrate how to fit models in `JAGS` (@plummer2004jags) using the package `R2jags` (@su2015package) as interface, which also requires to load some other packages.\n\n# Overview\n\n## Introduction\n\nUp until now (in the proceeding tutorials), the focus has been on models that adhere to specific assumptions about the underlying populations (and data). Indeed, both before and immediately after fitting these models, I have stressed the importance of evaluating and validating the proposed and fitted models to ensure reliability of the models. It is now worth us revisiting those fundamental assumptions as well as exploring the options that are available when the populations (data) do not conform. Let's explore a simple linear regression model to see how each of the assumptions relate to the model.\n\n$$\ny_i = \\beta_0 + \\beta_1x_i + \\epsilon_i \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0, \\sigma^2).\n$$\n\nThe above simple statistical model models the **linear relationship** of $y_i$ against $x_i$. The residuals ($\\epsilon$) are assumed to be **normally distributed** with a mean of zero and a constant (yet unknown) variance ($\\sigma$, **homogeneity of variance**). The residuals (and thus observations) are also assumed to all be **independent**.\n\nHomogeneity of variance and independence are encapsulated within the single symbol for variance ($\\sigma^2$). In assuming equal variances and independence, we are actually making an assumption about the variance-covariance structure of the populations (and thus residuals). Specifically, we assume that all populations are equally varied and thus can be represented well by a single variance term (all diagonal values in a $N\\times N$ covariance matrix are the same, $\\sigma^2$) and the covariances between each population are zero (off diagonals). In simple regression, each observation (data point) represents a single observation drawn (sampled) from an entire population of possible observations. The above covariance structure thus assumes that the covariance between each population (observation) is zero - that is, each observation is completely independent of each other observation. Whilst it is mathematically convenient when data conform to these conditions (normality, homogeneity of variance, independence and linearity), data often violate one or more of these assumptions. In the following, I want to discuss and explore the causes and options for dealing with non-compliance to each of these conditions. By gaining a better understanding of how the various model fitting engines perform their task, we are better equipped to accommodate aspects of the data that don't otherwise conform to the simple regression assumptions. In this tutorial we specifically focus on the topic of heterogeneity of the variance.\n\nIn order that the estimated parameters represent the underlying populations in an unbiased manner, the residuals (and thus each each observation) must be independent. However, what if we were sampling a population over time and we were interested in investigating how changes in a response relate to changes in a predictor (such as rainfall). For any response that does not \"reset\" itself on a regular basis, the state of the population (the value of its response) at a given time is likely to be at least partly dependent on the state of the population at the sampling time before. We can further generalise the above into:\n\n$$\ny_i \\sim Dist(\\mu_i),\n$$\n\nwhere $\\mu_i=\\boldsymbol X \\boldsymbol \\beta + \\boldsymbol Z \\boldsymbol \\gamma$, with $\\boldsymbol X$ and $\\boldsymbol \\beta$ representing the *fixed data structure* and *fixed effects*, respectively, while with $\\boldsymbol Z$ and $\\boldsymbol \\gamma$ represent the *varying data structure* and *varying effects*, respectively. In simple regression, there are no \"varying\" effects, and thus:\n\n$$\n\\boldsymbol \\gamma \\sim MVN(\\boldsymbol 0, \\boldsymbol \\Sigma),\n$$\n\nwhere $\\boldsymbol \\Sigma$ is a variance-covariance matrix of the form\n\n$$\n\\boldsymbol \\Sigma =  \\frac{\\sigma^2}{1-\\rho^2}\n  \\begin{bmatrix}\n   1 & \\rho^{\\phi_{1,2}} & \\ldots & \\rho^{\\phi_{1,n}} \\\\\n   \\rho^{\\phi_{2,1}} & 1 & \\ldots & \\vdots\\\\\n   \\vdots & \\ldots & 1 & \\vdots\\\\\n   \\rho^{\\phi_{n,1}} & \\ldots & \\ldots & 1\n   \\end{bmatrix}.\n$$\n\nNotice that this introduces a very large number of additional parameters that require estimating: $\\sigma^2$ (error variance), $\\rho$ (base autocorrelation) and each of the individual covariances ($\\rho^{\\phi_{n,n}}$). Hence, there are always going to be more parameters to estimate than there are date avaiable to use to estimate these paramters. We typically make one of a number of alternative assumptions so as to make this task more manageable.\n\n* When we assume that all residuals are independent (regular regression), i.e. $\\rho=0$, $\\boldsymbol \\Sigma$ is essentially equal to $\\sigma^2 \\boldsymbol I$ and we simply use:\n\n$$\n\\boldsymbol \\gamma \\sim N( 0,\\sigma^2).\n$$\n\n* We could assume there is a reasonably simple pattern of correlation that declines over time. The simplest of these is a *first order autoregressive* (AR1) structure in which exponent on the correlation declines linearly according to the time lag ($\\mid t - s\\mid$).\n\n$$\n\\boldsymbol \\Sigma =  \\frac{\\sigma^2}{1-\\rho^2}\n  \\begin{bmatrix}\n   1 & \\rho & \\ldots & \\rho^{\\mid t-s \\mid} \\\\\n   \\rho & 1 & \\ldots & \\vdots\\\\\n   \\vdots & \\ldots & 1 & \\vdots\\\\\n   \\rho^{\\mid t-s \\mid } & \\ldots & \\ldots & 1\n   \\end{bmatrix}.\n$$\n\nNote, in making this assumption, we are also assuming that the degree of correlation is dependent only on the lag and not on when the lag occurs (stationarity). That is all lag 1 residual pairs will have the same degree of correlation, all the lag $2$ pairs will have the same correlation and so on.\n\n# First order autocorrelation\n\nConsider an example, in which the number of individuals at time $2$ will be partly dependent on the number of individuals present at time $1$. Clearly then, the observations (and thus residuals) are not fully independent - there is an auto-regressive correlation dependency structure. We could accommodate this lack of independence by fitting a model that incorporates a AR1 variance-covariance structure. Alternatively, we fit the following model:\n\n$$\ny_{it} \\sim Dist(\\mu_{it}),\n$$\n\nwhere \n\n$$\n\\mu_{it}=\\boldsymbol X \\boldsymbol \\beta + \\rho \\epsilon_{i,t-1} + \\gamma_{it},\n$$\n\nand where $\\gamma \\sim N(0, \\sigma^2)$. In this version of the model, we are stating that the expected value of an observation is equal to the regular linear predictor plus the autocorrelation parameter ($\\rho$) multipled by the residual associated with the previous observation plus the regular independently distributed noise ($\\sigma^2$). Such a model is substantially faster to fit, although along with stationarity assumes in estimating the autocorrelation parameter, only the smallest lags are used. To see this in action, we will first generate some temporally auto-correlated data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(126)\nn = 50\na <- 20  #intercept\nb <- 0.2  #slope\nx <- round(runif(n, 1, n), 1)  #values of the year covariate\nyear <- 1:n\nsigma <- 20\nrho <- 0.8\n\nlibrary(nlme)\n## define a constructor for a first-order\n## correlation structure\nar1 <- corAR1(form = ~year, value = rho)\n## initialize this constructor against our data\nAR1 <- Initialize(ar1, data = data.frame(year))\n## generate a correlation matrix\nV <- corMatrix(AR1)\n## Cholesky factorization of V\nCv <- chol(V)\n## simulate AR1 errors\ne <- t(Cv) %*% rnorm(n, 0, sigma)  # cov(e) = V * sig^2\n## generate response\ny <- a + b * x + e\ndata.temporalCor = data.frame(y = y, x = x, year = year)\nwrite.table(data.temporalCor, file = \"data.temporalCor.csv\",\n    sep = \",\", quote = F, row.names = FALSE)\n\npairs(data.temporalCor)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWe will now proceed to analyse these data via both of the above techniques for `JAGS`:\n\n* incorporating AR1 residual autocorrelation structure\n\n* incorporating lagged residuals into the model\n\n# Incorporating lagged residuals\n\n## Model fitting\n\nWe proceed to code the model into `JAGS` (remember that in this software normal distribution are parameterised in terms of precisions $\\tau$ rather than variances, where $\\tau=\\frac{1}{\\sigma^2}$). Define the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelString = \" \n  model {\n  #Likelihood\n  for (i in 1:n) {\n  fit[i] <- inprod(beta[],X[i,])\n  y[i] ~ dnorm(mu[i],tau.cor)\n  }\n  e[1] <- (y[1] - fit[1])\n  mu[1] <- fit[1]\n  for (i in 2:n) {\n  e[i] <- (y[i] - fit[i]) #- phi*e[i-1]\n  mu[i] <- fit[i] + phi * e[i-1]\n  }\n  #Priors\n  phi ~ dunif(-1,1)\n  for (i in 1:nX) {\n  beta[i] ~ dnorm(0,1.0E-6)\n  }\n  sigma <- z/sqrt(chSq)    # prior for sigma; cauchy = normal/sqrt(chi^2)\n  z ~ dnorm(0, 0.04)I(0,)\n  chSq ~ dgamma(0.5, 0.5)  # chi^2 with 1 d.f.\n  tau <- pow(sigma, -2)\n  tau.cor <- tau #* (1- phi*phi)\n  }\n  \"\n\n## write the model to a text file\nwriteLines(modelString, con = \"tempModel.txt\")\n```\n:::\n\n\nArrange the data as a list (as required by `JAGS`). As input, `JAGS` will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXmat = model.matrix(~x, data.temporalCor)\ndata.temporalCor.list <- with(data.temporalCor, list(y = y, X = Xmat,\n    n = nrow(data.temporalCor), nX = ncol(Xmat)))\n```\n:::\n\n\nDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- c(\"beta\", \"sigma\", \"phi\")\nnChains = 2\nburnInSteps = 5000\nthinSteps = 1\nnumSavedSteps = 10000  #across all chains\nnIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\nnIter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA [1] 10000\n```\n\n\n:::\n:::\n\n\nStart the `JAGS` model (check the model, load data into the model, specify the number of chains and compile the model). Load the `R2jags` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(R2jags)\n```\n:::\n\n\nNow run the `JAGS` code via the `R2jags` interface.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.temporalCor.r2jags <- jags(data = data.temporalCor.list, inits = NULL, parameters.to.save = params,\n    model.file = \"tempModel.txt\", n.chains = nChains, n.iter = nIter,\n    n.burnin = burnInSteps, n.thin = thinSteps)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA Compiling model graph\nNA    Resolving undeclared variables\nNA    Allocating nodes\nNA Graph information:\nNA    Observed stochastic nodes: 50\nNA    Unobserved stochastic nodes: 5\nNA    Total graph size: 413\nNA \nNA Initializing model\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data.temporalCor.r2jags)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA Inference for Bugs model at \"tempModel.txt\", fit using jags,\nNA  2 chains, each with 10000 iterations (first 5000 discarded)\nNA  n.sims = 10000 iterations saved\nNA          mu.vect sd.vect    2.5%     25%     50%     75%   97.5%  Rhat n.eff\nNA beta[1]   30.841  11.858   8.852  22.556  30.505  38.559  55.177 1.001 10000\nNA beta[2]    0.225   0.100   0.028   0.159   0.225   0.292   0.422 1.001  3800\nNA phi        0.913   0.054   0.793   0.879   0.919   0.954   0.994 1.001  3400\nNA sigma     12.133   1.253   9.967  11.253  12.034  12.902  14.828 1.001  7300\nNA deviance 391.602   2.641 388.354 389.656 390.985 392.927 398.180 1.001  9200\nNA \nNA For each parameter, n.eff is a crude measure of effective sample size,\nNA and Rhat is the potential scale reduction factor (at convergence, Rhat=1).\nNA \nNA DIC info (using the rule, pD = var(deviance)/2)\nNA pD = 3.5 and DIC = 395.1\nNA DIC is an estimate of expected predictive error (lower deviance is better).\n```\n\n\n:::\n:::\n\n\n## MCMC diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mcmcplots)\ndenplot(data.temporalCor.r2jags, parms = c(\"beta\", \"sigma\", \"phi\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntraplot(data.temporalCor.r2jags, parms = c(\"beta\", \"sigma\", \"phi\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.mcmc = as.mcmc(data.temporalCor.r2jags)\n#Raftery diagnostic\nraftery.diag(data.mcmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA [[1]]\nNA \nNA Quantile (q) = 0.025\nNA Accuracy (r) = +/- 0.005\nNA Probability (s) = 0.95 \nNA                                                 \nNA           Burn-in  Total Lower bound  Dependence\nNA           (M)      (N)   (Nmin)       factor (I)\nNA  beta[1]  2        3930  3746         1.05      \nNA  beta[2]  2        3866  3746         1.03      \nNA  deviance 2        3866  3746         1.03      \nNA  phi      7        7397  3746         1.97      \nNA  sigma    4        4636  3746         1.24      \nNA \nNA \nNA [[2]]\nNA \nNA Quantile (q) = 0.025\nNA Accuracy (r) = +/- 0.005\nNA Probability (s) = 0.95 \nNA                                                 \nNA           Burn-in  Total Lower bound  Dependence\nNA           (M)      (N)   (Nmin)       factor (I)\nNA  beta[1]  3        4062  3746         1.080     \nNA  beta[2]  2        3620  3746         0.966     \nNA  deviance 2        3803  3746         1.020     \nNA  phi      6        6878  3746         1.840     \nNA  sigma    4        4713  3746         1.260\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Autocorrelation diagnostic\nautocorr.diag(data.mcmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA            beta[1]      beta[2]     deviance          phi        sigma\nNA Lag 0  1.000000000  1.000000000  1.000000000  1.000000000  1.000000000\nNA Lag 1  0.174857318 -0.006205038  0.164212015  0.398270011  0.166634323\nNA Lag 5  0.017823932  0.002140092 -0.016470982  0.017851360  0.011892997\nNA Lag 10 0.004107514  0.010910488  0.020001216 -0.005693854  0.007020861\nNA Lag 50 0.002176470  0.016102607  0.008360988  0.002061169 -0.007663541\n```\n\n\n:::\n:::\n\n\nAll diagnostics seem fine.\n\n## Model validation\n\nWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by `sigma`.\n\n$$\nRes_i = Y_i - \\mu_i\n$$\n\n$$\nRes_{i+1} = Res_{i+1} - \\rho Res_i\n$$\n\n$$\nRes_i = \\frac{Res_i}{\\sigma} \n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc = data.temporalCor.r2jags$BUGSoutput$sims.matrix\n# generate a model matrix\nnewdata = data.temporalCor\nXmat = model.matrix(~x, newdata)\n## get median parameter estimates\nwch = grep(\"beta\", colnames(mcmc))\ncoefs = mcmc[, wch]\nfit = coefs %*% t(Xmat)\nresid = -1 * sweep(fit, 2, data.temporalCor$y, \"-\")\nn = ncol(resid)\nresid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \"phi\"])\nresid = apply(resid, 2, median)/median(mcmc[, \"sigma\"])\nfit = apply(fit, 2, median)\n\nlibrary(ggplot2)\nggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\n    geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(acf(resid, lag = 40))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-4.png){width=672}\n:::\n:::\n\n\nNo obvious autocorrelation or other issues with residuals remaining.\n\n## Parameter estimates\n\nExplore parameter estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(broom.mixed)\ntidyMCMC(as.mcmc(data.temporalCor.r2jags), conf.int = TRUE, conf.method = \"HPDinterval\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA # A tibble: 4 × 5\nNA   term    estimate std.error conf.low conf.high\nNA   <chr>      <dbl>     <dbl>    <dbl>     <dbl>\nNA 1 beta[1]   30.8     11.9      7.36      53.5  \nNA 2 beta[2]    0.225    0.100    0.0321     0.425\nNA 3 phi        0.913    0.0537   0.813      1.00 \nNA 4 sigma     12.1      1.25     9.91      14.7\n```\n\n\n:::\n:::\n\n\n# Incorporating AR1 residual autocorrelation structure\n\n## Model fitting\n\nWe proceed to code the model into `JAGS` (remember that in this software normal distribution are parameterised in terms of precisions $\\tau$ rather than variances, where $\\tau=\\frac{1}{\\sigma^2}$). Define the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelString2 = \"\n  model {\n  #Likelihood\n  for (i in 1:n) {\n  mu[i] <- inprod(beta[],X[i,])\n  }\n  y[1:n] ~ dmnorm(mu[1:n],Omega)\n  for (i in 1:n) {\n  for (j in 1:n) {\n  Sigma[i,j] <- sigma2*(equals(i,j) + (1-equals(i,j))*pow(phi,abs(i-j))) \n  }\n  }\n  Omega <- inverse(Sigma)\n  \n  #Priors\n  phi ~ dunif(-1,1)\n  for (i in 1:nX) {\n  beta[i] ~ dnorm(0,1.0E-6)\n  }\n  sigma <- z/sqrt(chSq)    # prior for sigma; cauchy = normal/sqrt(chi^2)\n  z ~ dnorm(0, 0.04)I(0,)\n  chSq ~ dgamma(0.5, 0.5)  # chi^2 with 1 d.f.\n  sigma2 = pow(sigma,2)\n  #tau.cor <- tau #* (1- phi*phi)\n  }\n  \"\n\n## write the model to a text file\nwriteLines(modelString2, con = \"tempModel2.txt\")\n```\n:::\n\n\nArrange the data as a list (as required by `JAGS`). As input, `JAGS` will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXmat = model.matrix(~x, data.temporalCor)\ndata.temporalCor.list <- with(data.temporalCor, list(y = y, X = Xmat,\n    n = nrow(data.temporalCor), nX = ncol(Xmat)))\n```\n:::\n\n\nDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- c(\"beta\", \"sigma\", \"phi\")\nnChains = 2\nburnInSteps = 5000\nthinSteps = 1\nnumSavedSteps = 10000  #across all chains\nnIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\nnIter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA [1] 10000\n```\n\n\n:::\n:::\n\n\nNow run the `JAGS` code via the `R2jags` interface.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.temporalCor2.r2jags <- jags(data = data.temporalCor.list, inits = NULL, parameters.to.save = params,\n    model.file = \"tempModel2.txt\", n.chains = nChains, n.iter = nIter,\n    n.burnin = burnInSteps, n.thin = thinSteps)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA Compiling model graph\nNA    Resolving undeclared variables\nNA    Allocating nodes\nNA Graph information:\nNA    Observed stochastic nodes: 1\nNA    Unobserved stochastic nodes: 5\nNA    Total graph size: 5566\nNA \nNA Initializing model\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data.temporalCor2.r2jags)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA Inference for Bugs model at \"tempModel2.txt\", fit using jags,\nNA  2 chains, each with 10000 iterations (first 5000 discarded)\nNA  n.sims = 10000 iterations saved\nNA          mu.vect sd.vect    2.5%     25%     50%     75%   97.5%  Rhat n.eff\nNA beta[1]   19.926  24.597 -19.141   9.722  18.990  29.365  64.348 1.014 10000\nNA beta[2]    0.225   0.100   0.028   0.159   0.227   0.291   0.421 1.001 10000\nNA phi        0.890   0.055   0.773   0.854   0.895   0.930   0.980 1.011   160\nNA sigma     30.352  15.780  18.171  22.799  26.810  32.951  61.419 1.010   410\nNA deviance 392.642   2.706 389.232 390.628 392.029 394.019 399.490 1.001  2900\nNA \nNA For each parameter, n.eff is a crude measure of effective sample size,\nNA and Rhat is the potential scale reduction factor (at convergence, Rhat=1).\nNA \nNA DIC info (using the rule, pD = var(deviance)/2)\nNA pD = 3.7 and DIC = 396.3\nNA DIC is an estimate of expected predictive error (lower deviance is better).\n```\n\n\n:::\n:::\n\n\n## MCMC diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndenplot(data.temporalCor2.r2jags, parms = c(\"beta\", \"sigma\", \"phi\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntraplot(data.temporalCor2.r2jags, parms = c(\"beta\", \"sigma\", \"phi\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.mcmc = as.mcmc(data.temporalCor2.r2jags)\n#Raftery diagnostic\nraftery.diag(data.mcmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA [[1]]\nNA \nNA Quantile (q) = 0.025\nNA Accuracy (r) = +/- 0.005\nNA Probability (s) = 0.95 \nNA                                                 \nNA           Burn-in  Total Lower bound  Dependence\nNA           (M)      (N)   (Nmin)       factor (I)\nNA  beta[1]  15       14982 3746         4.00      \nNA  beta[2]  2        3866  3746         1.03      \nNA  deviance 2        3995  3746         1.07      \nNA  phi      9        9308  3746         2.48      \nNA  sigma    8        10294 3746         2.75      \nNA \nNA \nNA [[2]]\nNA \nNA Quantile (q) = 0.025\nNA Accuracy (r) = +/- 0.005\nNA Probability (s) = 0.95 \nNA                                                 \nNA           Burn-in  Total Lower bound  Dependence\nNA           (M)      (N)   (Nmin)       factor (I)\nNA  beta[1]  4        4955  3746         1.320     \nNA  beta[2]  2        3620  3746         0.966     \nNA  deviance 2        3930  3746         1.050     \nNA  phi      12       12162 3746         3.250     \nNA  sigma    8        10644 3746         2.840\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Autocorrelation diagnostic\nautocorr.diag(data.mcmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA             beta[1]      beta[2]   deviance       phi      sigma\nNA Lag 0   1.000000000  1.000000000 1.00000000 1.0000000 1.00000000\nNA Lag 1   0.023745389 -0.007088969 0.19477040 0.8775299 0.95206712\nNA Lag 5   0.019171996  0.008569178 0.08589717 0.5774327 0.80961727\nNA Lag 10 -0.009155805  0.008682983 0.06468974 0.3677587 0.64495814\nNA Lag 50  0.012167974  0.014954099 0.01686647 0.0317406 0.04466731\n```\n\n\n:::\n:::\n\n\nAll diagnostics seem fine.\n\n## Model validation\n\nWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by `sigma`.\n\n$$\nRes_i = Y_i - \\mu_i\n$$\n\n$$\nRes_{i+1} = Res_{i+1} - \\rho Res_i\n$$\n\n$$\nRes_i = \\frac{Res_i}{\\sigma} \n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc = data.temporalCor2.r2jags$BUGSoutput$sims.matrix\n# generate a model matrix\nnewdata = data.temporalCor\nXmat = model.matrix(~x, newdata)\n## get median parameter estimates\nwch = grep(\"beta\", colnames(mcmc))\ncoefs = mcmc[, wch]\nfit = coefs %*% t(Xmat)\nresid = -1 * sweep(fit, 2, data.temporalCor$y, \"-\")\nn = ncol(resid)\nresid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \"phi\"])\nresid = apply(resid, 2, median)/median(mcmc[, \"sigma\"])\nfit = apply(fit, 2, median)\n\nggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\n    geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(acf(resid, lag = 40))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n:::\n\n\nNo obvious autocorrelation or other issues with residuals remaining\n\n## Parameter estimates\n\nExplore parameter estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidyMCMC(as.mcmc(data.temporalCor2.r2jags), conf.int = TRUE, conf.method = \"HPDinterval\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA # A tibble: 4 × 5\nNA   term    estimate std.error conf.low conf.high\nNA   <chr>      <dbl>     <dbl>    <dbl>     <dbl>\nNA 1 beta[1]   19.9     24.6    -16.6       66.3  \nNA 2 beta[2]    0.225    0.0997   0.0313     0.423\nNA 3 phi        0.890    0.0546   0.780      0.984\nNA 4 sigma     30.4     15.8     16.2       51.2\n```\n\n\n:::\n:::\n\n\n# References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}